{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 AndaleMono;}
{\colortbl;\red255\green255\blue255;\red47\green255\blue18;\red26\green26\blue26;}
\margl1440\margr1440\vieww28520\viewh16600\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b\fs24 \cf0 \ul \ulc0 Included:
\b0 \ulnone \
palindrome.py - code\
palindrometest.py - unit test\
cases.txt  - CSV test file\
\

\b \ul Assumptions/specifications:
\b0 \ulnone \
1. Implementation is case sensitive.\
2. Implementation does not account for white spaces and punctuation.\
3. Empty string returns true\
\

\b \ul Solution: 
\b0 \ulnone In my current implementation you don\'92t need to write the test cases for each scenario. You can just add the input and the expected value along with the function name in a csv file and pass it as a command line argument. The function will then create individual test cases. \
\

\b \ul Run: 
\f1\b0\fs28 \cf2 \cb0 \ulnone \CocoaLigature0 python palindrometest.py cases.txt  \cf3 \cb1 \
\

\f0\b\fs24 \cf0 \ul \ulc0 \CocoaLigature1 Output: 
\b0 \ulnone  you can pass the name of the file which has the test cases as an argument\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f1\fs28 \cf2 \cb0 \CocoaLigature0 In setUp()\
\{'3_neg': ['volumes', 'False\\n'], '4_pos': ['v', 'True\\n'], '5_pos': ['', 'True'], '2_pos': ['radar', 'True\\n'], '1_pos': ['abba', 'True\\n']\}\
Setup complete\
('volumes', 'False\\n')\
('v', 'True\\n')\
('', 'True')\
('radar', 'True\\n')\
('abba', 'True\\n')\
('volumes', 'False\\n')\
('v', 'True\\n')\
('', 'True')\
('radar', 'True\\n')\
('abba', 'True\\n')\
..........\
----------------------------------------------------------------------\
Ran 10 tests in 0.001s\
\
OK\
\
Option 2:\
test_gen_1_pos (__main__.is_palindrome_Test_1_pos) ... ok\
test_gen_2_pos (__main__.is_palindrome_Test_2_pos) ... ok\
test_gen_3_neg (__main__.is_palindrome_Test_3_neg) ... ok\
test_gen_4_pos (__main__.is_palindrome_Test_4_pos) ... ok\
test_gen_5_pos (__main__.is_palindrome_Test_5_pos) ... ok\
test_gen_1_pos (__main__.is_palindrome_rec_Test_1_pos) ... ok\
test_gen_2_pos (__main__.is_palindrome_rec_Test_2_pos) ... ok\
test_gen_3_neg (__main__.is_palindrome_rec_Test_3_neg) ... ok\
test_gen_4_pos (__main__.is_palindrome_rec_Test_4_pos) ... ok\
test_gen_5_pos (__main__.is_palindrome_rec_Test_5_pos) ... ok\
\
----------------------------------------------------------------------\
Ran 10 tests in 0.001s\
\
OK\
}